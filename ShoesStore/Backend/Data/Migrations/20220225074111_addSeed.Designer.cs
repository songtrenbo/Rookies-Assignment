// <auto-generated />
using System;
using Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(ShoesStoreDatabaseContext))]
    [Migration("20220225074111_addSeed")]
    partial class addSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandName = "NIKE"
                        },
                        new
                        {
                            BrandId = 2,
                            BrandName = "AIR JORDAN"
                        },
                        new
                        {
                            BrandId = 3,
                            BrandName = "ADIDAS"
                        },
                        new
                        {
                            BrandId = 4,
                            BrandName = "PUMA"
                        },
                        new
                        {
                            BrandId = 5,
                            BrandName = "DANSKO"
                        },
                        new
                        {
                            BrandId = 6,
                            BrandName = "MLB"
                        },
                        new
                        {
                            BrandId = 7,
                            BrandName = "ECCO"
                        });
                });

            modelBuilder.Entity("Backend.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "SNEAKER"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "SANDALS"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "ATHLETIC"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "OUTDOOR"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "SLIPPERS"
                        });
                });

            modelBuilder.Entity("Backend.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://cdn.shopify.com/s/files/1/2358/2817/products/nike-air-force-1-low-lxx-serena-summit-white_300x.png?v=1643803817",
                            ProductId = 1,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 2,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://cdn.shopify.com/s/files/1/2358/2817/products/nike-air-force-1-low-lxx-serena-summit-white-2_300x.png?v=1643803817",
                            ProductId = 1,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 3,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://cdn.shopify.com/s/files/1/2358/2817/products/nike-air-force-1-low-lxx-serena-summit-white-3_300x.png?v=1643803817",
                            ProductId = 1,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 4,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "http://purchaze.com/pictures/nike-wmns-roshe-two-black-black-844931-004.jpg",
                            ProductId = 2,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 5,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "http://purchaze.com/pictures/nike-wmns-roshe-two-black-black-844931-004_1.jpg",
                            ProductId = 2,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 6,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "http://purchaze.com/pictures/nike-wmns-roshe-two-black-black-844931-004_2.jpg",
                            ProductId = 2,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 7,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://static.nike.com/a/images/t_prod_ss/w_640,c_limit,f_auto/ktfan65igkw4nb8c3jvs/nike-react-element-87-sail-rush-orange-release-date.jpg",
                            ProductId = 3,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 8,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://static.nike.com/a/images/t_prod_ss/w_640,c_limit,f_auto/w20texhnqyxylva0xbgl/nike-react-element-87-sail-rush-orange-release-date.jpg",
                            ProductId = 3,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 9,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://static.nike.com/a/images/t_prod_ss/w_640,c_limit,f_auto/rdim8o3ryfqkzc7anrpd/nike-react-element-87-sail-rush-orange-release-date.jpg",
                            ProductId = 3,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 10,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/71o4uSF26YL._AC_UX575_.jpg",
                            ProductId = 4,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 11,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/61qqMFxGxyL._AC_UX575_.jpg",
                            ProductId = 4,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 12,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/71uHDLaWGXL._AC_UX575_.jpg",
                            ProductId = 4,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 13,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/71M2oxWCjkS._AC_UX575_.jpg",
                            ProductId = 5,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 14,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/715R0-wRKeS._AC_UX575_.jpg",
                            ProductId = 5,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 15,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/71ADbn83HWS._AC_UX575_.jpg",
                            ProductId = 5,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 16,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/41lyjznmaSL._AC_.jpg",
                            ProductId = 6,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 17,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/510MaQWslcL._AC_.jpg",
                            ProductId = 6,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 18,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/71Hm60lorWL._AC_UX575_.jpg",
                            ProductId = 7,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 19,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/61FGZx9tVtL._AC_UY675_.jpg",
                            ProductId = 7,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 20,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/61ju+hAFY3L._AC_UY625_.jpg",
                            ProductId = 7,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 21,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/61ZrxFvudzL._AC_UX575_.jpg",
                            ProductId = 7,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 22,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/71zg2Y4-9+L._AC_UY575_.jpg",
                            ProductId = 8,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 23,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/61pql62AGKL._AC_UY575_.jpg",
                            ProductId = 8,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 24,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/61UjkEy3z+L._AC_UY575_.jpg",
                            ProductId = 8,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ImageId = 25,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Path = "https://m.media-amazon.com/images/I/61w-vJBt1JL._AC_UY575_.jpg",
                            ProductId = 8,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Backend.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Backend.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<int>("ProductQty")
                        .HasColumnType("int");

                    b.Property<int>("Subtotal")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailsId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Backend.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PermissionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            PermissionName = "Admin"
                        },
                        new
                        {
                            PermissionId = 2,
                            PermissionName = "Customer"
                        });
                });

            modelBuilder.Entity("Backend.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("ProductDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            CreateDate = new DateTime(2021, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 167.5,
                            ProductDesc = "",
                            ProductName = "Air Force 1 Low LXX \"Serema Summit White\"",
                            Stock = 10,
                            UpdateDate = new DateTime(2021, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 2,
                            BrandId = 1,
                            CategoryId = 1,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Price = 74.950000000000003,
                            ProductDesc = "Bootie construction delivers a snug, comfortable fit / Padded collar provides plush cushioning / Sockliner made of slow-recovery foam enhances comfort and cushioning",
                            ProductName = "Roshe Two Black",
                            Stock = 11,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 3,
                            BrandId = 1,
                            CategoryId = 1,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Price = 75.489999999999995,
                            ProductDesc = "Bootie construction delivers a snug, comfortable fit / Padded collar provides plush cushioning / Sockliner made of slow-recovery foam enhances comfort and cushioning",
                            ProductName = "Running React Element 87",
                            Stock = 12,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 4,
                            BrandId = 3,
                            CategoryId = 2,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Price = 69.939999999999998,
                            ProductDesc = "100% Synthetic, Imported, Rubber sole, Shaft measures approximately 6-12 inches from arch, Platform measures approximately 0-3 inches, Boot opening measures approximately 0-3 inches around, Regular fit",
                            ProductName = "Adidas Unisex-Adult Adissage Slides Sandal",
                            Stock = 24,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 5,
                            BrandId = 4,
                            CategoryId = 2,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Price = 38.759999999999998,
                            ProductDesc = "Imported, Rubber sole, Casual Athletic Sneaker, Leadcat",
                            ProductName = "PUMA Unisex-Adult Leadcat Slide Sandal",
                            Stock = 10,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 6,
                            BrandId = 4,
                            CategoryId = 2,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Price = 67.450000000000003,
                            ProductDesc = "fabric",
                            ProductName = "PUMA Cool Cat Dark Prismatic",
                            Stock = 18,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 7,
                            BrandId = 7,
                            CategoryId = 2,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Price = 143.94999999999999,
                            ProductDesc = "fabric",
                            ProductName = "ECCO Women X-trinsic Textile Strap Sandal",
                            Stock = 13,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 8,
                            BrandId = 5,
                            CategoryId = 2,
                            CreateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified),
                            Price = 109.65000000000001,
                            ProductDesc = "Made in the USA or Imported, Ethylene Vinyl Acetate sole, Platform measures approximately 1, Multiple points of adjustability, Recycled webbings",
                            ProductName = "Dansko Womens Racquel Sport Sandals - lightweight sandals with arch support",
                            Stock = 19,
                            UpdateDate = new DateTime(2021, 11, 5, 5, 35, 51, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Backend.Models.Rate", b =>
                {
                    b.Property<int>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RateId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("Backend.Models.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("SizeName")
                        .HasColumnType("float");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            SizeId = 1,
                            SizeName = 35.5
                        },
                        new
                        {
                            SizeId = 2,
                            SizeName = 36.0
                        },
                        new
                        {
                            SizeId = 3,
                            SizeName = 36.5
                        },
                        new
                        {
                            SizeId = 4,
                            SizeName = 37.0
                        },
                        new
                        {
                            SizeId = 5,
                            SizeName = 37.5
                        },
                        new
                        {
                            SizeId = 6,
                            SizeName = 38.0
                        },
                        new
                        {
                            SizeId = 7,
                            SizeName = 38.5
                        },
                        new
                        {
                            SizeId = 8,
                            SizeName = 39.0
                        },
                        new
                        {
                            SizeId = 9,
                            SizeName = 39.5
                        },
                        new
                        {
                            SizeId = 10,
                            SizeName = 40.0
                        },
                        new
                        {
                            SizeId = 11,
                            SizeName = 40.5
                        },
                        new
                        {
                            SizeId = 12,
                            SizeName = 41.0
                        },
                        new
                        {
                            SizeId = 13,
                            SizeName = 42.0
                        },
                        new
                        {
                            SizeId = 14,
                            SizeName = 43.0
                        },
                        new
                        {
                            SizeId = 15,
                            SizeName = 44.0
                        },
                        new
                        {
                            SizeId = 16,
                            SizeName = 45.0
                        },
                        new
                        {
                            SizeId = 17,
                            SizeName = 46.0
                        });
                });

            modelBuilder.Entity("Backend.Models.SizeProduct", b =>
                {
                    b.Property<int>("SizeProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("SizeProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("SizeProducts");

                    b.HasData(
                        new
                        {
                            SizeProductId = 1,
                            ProductId = 1,
                            SizeId = 4
                        },
                        new
                        {
                            SizeProductId = 2,
                            ProductId = 1,
                            SizeId = 5
                        },
                        new
                        {
                            SizeProductId = 3,
                            ProductId = 2,
                            SizeId = 6
                        },
                        new
                        {
                            SizeProductId = 4,
                            ProductId = 2,
                            SizeId = 6
                        },
                        new
                        {
                            SizeProductId = 5,
                            ProductId = 3,
                            SizeId = 7
                        },
                        new
                        {
                            SizeProductId = 6,
                            ProductId = 3,
                            SizeId = 1
                        },
                        new
                        {
                            SizeProductId = 7,
                            ProductId = 3,
                            SizeId = 2
                        },
                        new
                        {
                            SizeProductId = 8,
                            ProductId = 4,
                            SizeId = 3
                        },
                        new
                        {
                            SizeProductId = 9,
                            ProductId = 4,
                            SizeId = 1
                        },
                        new
                        {
                            SizeProductId = 10,
                            ProductId = 4,
                            SizeId = 2
                        },
                        new
                        {
                            SizeProductId = 11,
                            ProductId = 4,
                            SizeId = 3
                        },
                        new
                        {
                            SizeProductId = 12,
                            ProductId = 5,
                            SizeId = 5
                        },
                        new
                        {
                            SizeProductId = 13,
                            ProductId = 5,
                            SizeId = 6
                        },
                        new
                        {
                            SizeProductId = 14,
                            ProductId = 5,
                            SizeId = 7
                        },
                        new
                        {
                            SizeProductId = 15,
                            ProductId = 6,
                            SizeId = 8
                        },
                        new
                        {
                            SizeProductId = 16,
                            ProductId = 6,
                            SizeId = 9
                        },
                        new
                        {
                            SizeProductId = 17,
                            ProductId = 6,
                            SizeId = 10
                        },
                        new
                        {
                            SizeProductId = 18,
                            ProductId = 7,
                            SizeId = 11
                        },
                        new
                        {
                            SizeProductId = 19,
                            ProductId = 7,
                            SizeId = 12
                        },
                        new
                        {
                            SizeProductId = 20,
                            ProductId = 7,
                            SizeId = 13
                        },
                        new
                        {
                            SizeProductId = 21,
                            ProductId = 8,
                            SizeId = 14
                        },
                        new
                        {
                            SizeProductId = 22,
                            ProductId = 8,
                            SizeId = 15
                        },
                        new
                        {
                            SizeProductId = 23,
                            ProductId = 8,
                            SizeId = 16
                        });
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("UserId");

                    b.HasIndex("PermissionId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "772 North Dr Villa Ridge, Missouri(MO), 63089",
                            FirstName = "Sam",
                            LastName = "GoodMan",
                            Password = "Admin",
                            PermissionId = 1,
                            Phone = "7169379740",
                            UserEmail = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            Address = "124 Damon Rd Needham Heights, Massachusetts(MA), 02494",
                            FirstName = "Smith",
                            LastName = "Nico",
                            Password = "123456",
                            PermissionId = 2,
                            Phone = "9226852630",
                            UserEmail = "nico.smith29@gmail.com"
                        },
                        new
                        {
                            UserId = 3,
                            Address = "121 W Main St Pottstown, Pennsylvania(PA), 19465",
                            FirstName = "Megane",
                            LastName = "Conroy",
                            Password = "123456",
                            PermissionId = 2,
                            Phone = "5547714494",
                            UserEmail = "megane_conroy@gmail.com"
                        },
                        new
                        {
                            UserId = 4,
                            Address = "6910 Middle Rd 4 Racine, Wisconsin(WI), 53402",
                            FirstName = "Wilber",
                            LastName = "Stafford",
                            Password = "123456",
                            PermissionId = 2,
                            Phone = "3388576230",
                            UserEmail = "wilber73@gmail.com"
                        },
                        new
                        {
                            UserId = 5,
                            Address = "123456', N'173 Candlewood Trailer Park Danbury, Connecticut(CT), 06811",
                            FirstName = "Timothy",
                            LastName = "Zulauf",
                            Password = "123456",
                            PermissionId = 2,
                            Phone = "3643898217",
                            UserEmail = "timothy.zulauf84@gmail.com"
                        },
                        new
                        {
                            UserId = 6,
                            Address = "1025 Meadow Dr Cottage Hills, Illinois(IL), 62018",
                            FirstName = "Derek",
                            LastName = "Levy",
                            Password = "123456",
                            PermissionId = 2,
                            Phone = "9799644643",
                            UserEmail = "customer1@gmail.com"
                        });
                });

            modelBuilder.Entity("Backend.Models.Image", b =>
                {
                    b.HasOne("Backend.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Backend.Models.Order", b =>
                {
                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.OrderDetail", b =>
                {
                    b.HasOne("Backend.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Backend.Models.Product", b =>
                {
                    b.HasOne("Backend.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("Backend.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Backend.Models.Rate", b =>
                {
                    b.HasOne("Backend.Models.Order", "Order")
                        .WithMany("Rates")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Product", "Product")
                        .WithMany("Rates")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("Rates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.SizeProduct", b =>
                {
                    b.HasOne("Backend.Models.Product", "Product")
                        .WithMany("SizeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Size", "Size")
                        .WithMany("SizeProducts")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.HasOne("Backend.Models.Permission", "Permission")
                        .WithMany("Users")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Backend.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Backend.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Backend.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("Backend.Models.Permission", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OrderDetails");

                    b.Navigation("Rates");

                    b.Navigation("SizeProducts");
                });

            modelBuilder.Entity("Backend.Models.Size", b =>
                {
                    b.Navigation("SizeProducts");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Rates");
                });
#pragma warning restore 612, 618
        }
    }
}
